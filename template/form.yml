environment:
    name: Project dashboard environment
    icon: 'fas fa-tachometer-alt'
    fields:
        bigboat_url:
            field: string
            label: 'BigBoat URL'
            hint: 'The URL to the location of the BigBoat dashboard.'
            placeholder: '{{bigboat_placeholder}}'
            option: [settings, 'bigboat', 'host']
        bigboat_key:
            field: string
            label: 'BigBoat key'
            widget: password
            hint: 'An API key of the BigBoat dashboard.'
            longer_hint: "You can generate a new key on the dashboard's configuration page. Do not generate the API key while logged out. Any logged-in API key works."
            option: [settings, 'bigboat', 'key']
        jira_key:
            field: string
            required: true
            label: 'JIRA key prefix'
            placeholder: 'ABC'
            hint: 'The JIRA prefix used to identify issues in the JIRA board.'
            longer_hint: 'If you have issues like <samp>ABC-1234</samp>, then this is <kbd>ABC</kbd>. You can also find it on <a href="{{jira_url}}/secure/BrowseProjects.jspa?selectedCategory=all&selectedProjectType=all">the Browse Projects</a> page where it is in the "Key" column. If you use multiple JIRA boards in your project (which share the same dashboard environment) then the main project key only. You can specify additional projects to obtain in the "Quality report name" field.'
        quality_report_name:
            field: map
            fields:
                key:
                    field: string
                    label: 'JIRA key'
                    placeholder: 'ABC'
                value:
                    field: string
                    label: 'HQ name'
                    placeholder: 'abc'
            label: 'Quality report name'
            hint: 'The name of the project used internally by the quality report dashboard.'
            longer_hint: 'Find the name in <a href="{{quality_report_definition_url}}">the Quality reports definitions</a>; if you have a repository like <samp>quality-report-abc-definition</samp> then this is <kdb>abc</kdb>. Skip this if there is no quality report or if the definition does not contain any source information for the sources we obtain (e.g., version control). To collect multiple projects in the agent, include for each project their JIRA key and quality report name.'
            cloneable: true
version_control:
    name: Version control system
    icon: 'fas fa-code-branch'
    cloneable: true
    fields:
        version_control_type:
            field: string
            required: true,
            label: 'Version control type'
            choices:
                git: 'Git'
                gitlab: 'GitLab'
                github: 'GitHub'
                tfs: 'Team Foundation Server'
                subversion: 'Subversion'
            widget: select
            hint: 'The type of version control system used.'
            longer_hint: 'For Git systems, we accept several flavors which provide us with richer data. Currently, only one source is accepted. If you use multiple version control systems, consider migrating them to one and provide the system with the most relevant source code.'
        version_control_domain:
            field: host
            required: true
            label: 'Version control domain'
            placeholder: '{{version_control_placeholder}}'
            hint: 'The domain name plus optional port number where the version control system is hosted.'
            longer_hint: 'For example <samp>{{version_control_placeholder}}</samp> or <samp>{{version_control_port_sample}}</samp>. Do not add the protocol to this value.'
        version_control_auth:
            field: string
            required: true
            label: 'Version control authentication'
            choices:
                none: 'Anonymous checkout'
                github_api: 'GitHub API'
                gitlab_api: 'GitLab API'
                deploy_key: 'Deploy key'
                user_pass: 'Username and password'
            widget: select
            hint: 'The authentication scheme to use when connecting to the version control system.'
            longer_hint: |
                <ul>
                    <li>Anonymous checkout: generally not an acceptable method.</li>
                    <li>GitHub API: Use the API to register a specific SSH token for a user.</li>
                    <li>GitLab API: Use the API to register a specific SSH token for a user. This user needs at least Reporter level access permissions to the group. Generate an API token for this user on GitLab in the user's Settings, under Personal Access tokens. Use a descriptive name "GROS reporter" with no expiry for the "api" scope. Keep the username field in this form empty and provide the API token in the token field after that.</li>
                    <li>Deploy key: Enter a predefined Git SSH private key. This may be used in combination with a user, although you may have to supply a generic user for authentication. Userless global deploy keys are supported on GitLab, but Administrator access is required to register the deploy key pair. In general, on Linux/Mac, use <kbd>ssh-keygen -t rsa -C "GROS reporter" -b 4096 -f deploy_key</kbd> and press <kbd>Enter</kbd> twice to skip entering a passphrase (not supported at this moment). Insert the public part (found in <samp>deploy_key.pub</samp>) on GitLab in the Admin Area under Deploy Keys with a descriptive name <kbd>"GROS reporter"</kbd>, and without write access. This can also be used for pre-generated SSH key pairs in (other) version control system. Set the username field to the SSH user (such as <kbd>git</kbd>) or keep it empty, just like the token field, and provide the contents of the private key (<samp>deploy_key</samp>) in the key field after that.</li>
                    <li>Username and password: Combination as used by TFS or Subversion. Provide the username and password in the next two fields.</li>
                </ul>
        version_control_user:
            field: string
            label: 'Version control username'
            hint: 'The username to login to the version control system with. Only used if the authentication is "Username and password".'
        version_control_token:
            field: string
            label: 'Version control authentication token'
            widget: password
            hint: 'The password or API token to login to the version control system with.'
        version_control_key:
            field: string
            label: 'Version control SSH deploy key'
            widget: textarea
            hint: 'The custom private SSH part of a deploy key pair to login to the version control system with.'
            expand: true
        version_control_group:
            field: string
            label: 'Version control group name'
            placeholder: 'abc'
            hint: 'The path name of the group on GitLab or the collection in TFS in which all the source code repositories are stored.'
            longer_hint: 'This is found under the Settings for the group on GitLab, with setting name "Group path", or in the URL of the collection in Team Foundation Server (usually starting with and including <samp>tfs/</samp> and ending just before <samp>/_git/</samp>). This is only necessary if the quality reporting dashboard has no metrics for the source code repository.'
            expand: true
        version_control_source:
            field: map
            fields:
                key:
                    field: string
                    label: 'Name'
                value:
                    field: string
                    label: 'URL'
            label: 'Checkout URL'
            hint: 'The URLs to use to obtain data from the version control system. <strong>Only</strong> use this if the URLs are not provided by the project definition.'
            longer_hint: 'This field is ignored if a quality report name is provided. If the project has no definition, then this is used to check out one repository and possibly find more repositories to collect. Prefer using the version control group for supported environments.'
            expand: true
            cloneable: true
        version_control_unsafe:
            field: boolean
            widget: checkbox
            label: 'Disable host verification (unsafe)'
            hint: 'Do <strong>not</strong> disable host verification unless certificate errors arise when connecting to the version control system.'
            longer_hint: 'If the host has an SSL host key that cannot be verified against the scanned key, or it has an invalid HTTPS certificate, then this option can skip the verification checks when possible.'
            expand: true
        version_control_skip_stats:
            field: boolean
            widget: checkbox
            label: 'Disable commit volume collection'
            hint: 'Do <strong>not</strong> disable commit volume collection unless performance issues arise when collecting differences from the version control system.'
            longer_hint: 'If the repositories provide large bulks of differences, then this option can skip the commit volume calculations based on the differences.'
            expand: true
        version_control_from_date:
            field: string
            label: 'Version control start date'
            hint: 'Date from which to start collecting revisions.'
            longer_hint: 'This allows for ignoring all commits authored before th given date in all repositories on this host, useful for migration schemes. The <samp>Version control tag</samp> option overrides this behavior. Only for Git repositories.'
            expand: true
        version_control_tag:
            field: string
            label: 'Version control tag'
            hint: 'Tag from which to start collecting revisions.'
            longer_hint: 'If the tag is found in a repository, then only the commiots leading to this that are collected. This can be useful for migration schemes. Only for Git repositories.'
            expand: true
jenkins:
    name: Jenkins
    icon: 'fab fa-jenkins'
    cloneable: true
    fields:
        jenkins_host:
            field: host
            required: true
            label: 'Jenkins domain'
            placeholder: '{{jenkins_placeholder}}'
            hint: 'The domain name and optionally port number of the Jenkins instance used for automated builds of the application developed by the team.'
            longer_hint: 'Get this from the main page of Jenkins by clicking on the logo in the top left and then copying the resulting URL, for example <samp>{{jenkins_placeholder}}</samp>.'
        jenkins_user:
            field: string
            label: 'Jenkins username'
            hint: 'The username to log in to Jenkins with. This is only necessary if Jenkins is completely restricted to logged-in users, since we only need read access.'
        jenkins_token:
            field: string
            label: 'Jenkins token'
            widget: password
            hint: 'The password to log in to the Jenkins API with. This is only necessary if Jenkins is completely restricted to logged-in users.'
            longer_hint: 'Use an API token instead of the plain (LDAP) password. You can find the API token when you are logged in by clicking on your name in the top right, then Configure, and finally press <kbd><samp>Show API Token...</samp></kbd>'
        jenkins_unsafe:
            field: boolean
            widget: checkbox
            label: 'Disable host verification (unsafe)'
            hint: 'Do <strong>not</strong> disable host verification unless certificate errors arise when connecting to the build system.'
            longer_hint: 'If the  Jenkins host has an SSL host key that cannot be verified against the scanned key, or it has an invalid HTTPS certificate, then this option can skip the verification checks when possible.'
            expand: true
